<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Scrum with Trello]]></title>
    <url>%2F2017%2F09%2F14%2FScrum-with-Trello%2F</url>
    <content type="text"><![CDATA[原文：https://www.infoq.com/articles/scrum-trello]]></content>
      <tags>
        <tag>scrum</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker 中Hash Sum mismatch问题的解决方案]]></title>
    <url>%2F2017%2F09%2F14%2FDocker-%E4%B8%ADHash-Sum-mismatch%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[原文：http://ju.outofmemory.cn/entry/276978 问题由于特殊的网络原因，网络偶尔抽风就会导致我们在做apt-update时候出现Hash Sum mismatch的问题，尤其是在使用docker Debian：jessie的时候。 原因我们所使用的网络供应商，有些会设置一些透明缓存，以增加网络内部速度，减少出口的流量，你获取的某些文件不是源服务器上的真正文件，是从缓存中获取的，当缓存中获取的一些校验信息跟源中不一致的时候，自然提示校验失败，无法继续更新。此问题实际上跟apt软件仓库的格式设计有关。新发布的版本的软件仓库更新比较频繁，按道理缓存中的文件应该同步更新，可惜因为多个镜像站点的有快慢，因此造成了缓存无法保证一致性。当网络提供商足够有实力，不设至透明缓存时，这个问题是不存在的。这就是为什么有些人反馈使用无线上网卡（移动、联通的3g网络）就一切OK，一单换回长城宽带、或者宽带通就不行了。以上就是问题出现的真正原因。 解决方法解决方案很简单，绕过缓存直接访问站点即可。值得称赞的是国内好几家良心企业提供了更新源，其中速度最好的应该是阿里提供的 http://mirrors.aliyun.com/以debian为例， 访问 http://mirrors.aliyun.com/help/debian 可以看到修改方法。具体到Docker中， 我们需要修改Docker file，添加如下代码： RUN echo &apos;deb http://mirrors.aliyun.com/debian/ jessie main non-free contrib\n\ deb http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib\n\ deb-src http://mirrors.aliyun.com/debian/ jessie main non-free contrib\n\ deb-src http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib&apos; &gt; /etc/apt/sources.list]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install gitlab on ubuntu16.04 using docker]]></title>
    <url>%2F2017%2F09%2F13%2FInstall-gitlab-on-ubuntu16-04-using-docker%2F</url>
    <content type="text"><![CDATA[Gitlab Docker Install: Install Docker: https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/ sudo apt-get remove docker docker-engine docker.io sudo apt-get update sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual sudo apt-get install apt-transport-https ca-certificates curl software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo apt-key fingerprint 0EBFCD88 sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; sudo apt-get update sudo apt-get install docker-ce Install Docker Compose: https://docs.docker.com/compose/install/#install-compose sudo curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose docker-compose --version GitLab Docker images: http://docs.gitlab.com/omnibus/docker/README.html docker-compose.yml: gitlab: image: &apos;gitlab/gitlab-ce:latest&apos; restart: always hostname: &apos;yinman&apos; environment: GITLAB_OMNIBUS_CONFIG: | external_url &apos;http://yinman:8090&apos; gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 2224 ports: - &apos;8090:8090&apos; - &apos;2224:22&apos; volumes: - &apos;/home/srv/gitlab/config:/etc/gitlab&apos; - &apos;/home/srv/gitlab/logs:/var/log/gitlab&apos; - &apos;/home/srv/gitlab/data:/var/opt/gitlab&apos; Start Gitlab: sudo docker-compose up -d Change configure: sudo docker exec -it gitlab /bin/bash sudo docker exec -it gitlab vi /etc/gitlab/gitlab.rb sudo docker restart gitlab SMTP Setting: https://docs.gitlab.com/omnibus/settings/smtp.html#qq-exmail QQ exmail (腾讯企业邮箱) gitlab_rails[&apos;smtp_enable&apos;] = true gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.exmail.qq.com&quot; gitlab_rails[&apos;smtp_port&apos;] = 465 gitlab_rails[&apos;smtp_user_name&apos;] = &quot;xxxx@xx.com&quot; gitlab_rails[&apos;smtp_password&apos;] = &quot;password&quot; gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot; gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true gitlab_rails[&apos;smtp_tls&apos;] = true gitlab_rails[&apos;gitlab_email_from&apos;] = &apos;xxxx@xx.com&apos; import gitlab repository data cp linux-3.3-OMAP-L138.git /home/srv/gitlab/data/git-data/repositories/bqin/ rm linux-3.3-OMAP-L138.git/hooks find ./ -name hooks | xargs rm chown git:git -R * gitlab-rake gitlab:import:repos git remote set-url origin ssh://git@yinman:2224/bqin/ysbr2.git 无需使用 sudo 执行 docker 命令 sudo usermod -aG docker $(whoami) 之后重新登录，再运行 $ docker run hello-world 进行测试 docker run -it ubuntu 该命令启动了一个 ubuntu 容器，然后通过 -i 开关指定在容器中开启一个可交互的 shell ​]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu 16.04 server config]]></title>
    <url>%2F2017%2F09%2F13%2Fubuntu-16-04-server-config%2F</url>
    <content type="text"><![CDATA[参考：https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-16-04 apache2: sudo apt-get install apache2 Install MySQL sudo apt-get install mysql-server Install PHP sudo apt-get install php libapache2-mod-php php-mcrypt php-mysql sudo systemctl restart apache2 Installing Webmin sudo nano /etc/apt/sources.list Then add this line to the bottom of the file to add the new repository: deb http://download.webmin.com/download/repository sarge contrib wget http://www.webmin.com/jcameron-key.asc sudo apt-key add jcameron-key.asc sudo apt-get update sudo apt-get install webmin jre sudo apt install default-jre 32bit sudo dpkg --add-architecture i386 sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 ctags sudo apt-get install ctags sudo apt install cscope samba sudo apt-get install samba vim /etc/samba/smb.conf 把已有的账户添加到samba里并设置新密码，例如账户是“ycyubuntu”，在root账户下输入命令：smbpasswd -a ycyubuntu]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub+Hexo 搭建个人网站详细教程]]></title>
    <url>%2F2017%2F09%2F13%2FGitHub-Hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[原文：https://zhuanlan.zhihu.com/p/26625249 github 仓库地址git@github.com:buaaqbh/buaaqbh.github.io.git hexo基本操作 发布新的Blog hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章 hexo g == hexo generate #生成 hexo s == hexo server #启动服务预览 hexo d == hexo deploy #部署 删除Blog 在/source/_posts/中直接删除了相应的.md文件 hexo clean hexo g -d]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
